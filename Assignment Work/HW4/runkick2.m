function runkick2% Kick simulation% MCEN 4228/5228% Based on code from ME/BME 646  % first set the constants, which are used by subfunctions:%   I m g lopt vmax Fmax rf rcm tact betaI = 0.1832;   % moment of inertia of lower leg (kg-m^2)m = 4.88;     % mass (kg)g = 9.81;     % grav constantlopt = 0.09;  % optimal muscle length in metersvmax = 0.45;  % about 6 lopts/s max shortening velFmax = 12000; % max isometric force (N)rf   = 0.033; % moment arm of quadriceps musclercm  = 0.264; % distance b/w center of mass & joint% Now do the simulation starting with the knee at 90 degoptions = odeset('events', @eventkick);[t,y] = ode45(@fkick, [0 .5], [pi/2;0], options);% to plot things such as muscle shortening velocity, muscle% length, and muscle force, it's necessary to use the states% to re-compute these values.phi = y(:,1);subplot(221);plot(t,phi*180/pi)xlabel('time (s)'); ylabel('angle (deg)');title('knee angle')subplot(222);phidot = y(:,2);% add equation for muscle velocity:%v = ;%plot(t,v);%ylabel('v (m/s)'); xlabel('time (s)');%title('Shortening vel');subplot(223);l = rf*(pi/2 - phi) + lopt;plot(t,l);ylabel('length (m)'); xlabel('time (s)');title('Muscle length');subplot(224); clear F% for i=1:length(t)% 	F(i) = Fmax * fl(l(i)/lopt) * fv(v(i)/vmax);% end% plot(t, F);ylabel('Force (N)'); xlabel('time (s)');title('Muscle force');legend('w/o excitation-activation');% end main code; subfunctions defined belowfunction xdot = fkick(t,x)% state derivative for kicking simulation% states: phi, phidot, a where phi is angle of leg, a activationphi    = x(1);phidot = x(2);a = 1; % maximum activationl = rf*(pi/2 - phi)/ lopt + 1;  % find normalized length as function of phiv = rf*phidot/vmax;      % normalized shortening velocityF = Fmax * fl(l) * fv(v) * a; % muscle forceM = F * rf;Mg = - m * g * rcm *sin(phi - pi/2); % gravitational momentphiddot = (M + Mg) / I; % second derivative of phixdot = [phidot; phiddot];end % fkickfunction f = fl(x)% normalized force-length curvew = 0.5;lopt = 1;  % this is a normalized optimal lengthf = 1 - ((x-lopt)/(w*lopt)).^2;f(f<0) = 0; % rectify the curve, removing any negative entriesend % flfunction f = flp(x)% normalized passive force-length curve for muscle, where% input x is strainf = 8*(x-1).^3; % Here we're using a cubic function for passive force-lengthf(x < 1) = 0; % where the function gives zero force for x < 1end  % flpfunction f = fv(v)% normalized force-velocity relation% input is normalized velocity: v/vmaxaf = 0.25;  % shape parameterf = (1 - v)./(1 + v/af);if (f < 0), f = 0; endend % fvfunction [value, isterminal, direction] = eventkick(t, x)% returns event function for kicking simulation% Here is how event checking works:  % At each integration step, ode45 checks to see if an% event function passes through zero (in this case, we need% the function to go through zero when the foot hits the% ground).  It finds the value of the event function by calling% eventrw, which is responsible for returning the value of the % event function in variable value.  isterminal should contain% a 1 to signify that the integration should stop (otherwise it% will keep going after value goes through zero).  Finally,% direction should specify whether to look for event function% going through zero with positive or negative slope, or either.% we want to stop the simulation when phi = pi (full extension)phi = x(1);value = phi - pi;isterminal = 1;  % tells ode45 to stop when event occursdirection = 0;  % tells ode45 to look for any crossingend % eventkickend % file runkick